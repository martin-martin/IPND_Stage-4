THIS FILE IS JUST FOR COMPLETENESS, SO THAT MY NOTES ARE PACKED ALSO IN THE .ZIP FILE. I HAVE ENTERED MY INPUT IN THE FORM PAGE I CREATED FOR STAGE 4.
YOU CAN GO READ THEM ONLINE ON THIS PAGE (THE FIRST AND LOWEST INPUT): http://stage-4-996.appspot.com/collection

-----------------------------------------------------------------------------------------------------------------------

Servers: Your notes should demonstrate a basic understanding of how servers handle requests, process them, and deliver responses.

HTTP or HyperText Transfer Protocol is, as the name already reveals, a protocol. It is the most common protocol used on the world wide web, and what it does is to define how should a client (e.g. me or you) communicate with a server. Basically this goes like this: a server sits around waiting. until... a client sends a GET request to that server, whereupon the server sends a response. This response could be for example a website that my browser would then display. A GET request is a specific method of the HTTP protocol.
First our browser connects to the URL. Once connected, it can send requests, asking the server to give responses. The request line looks like this: | GET /path HTTP/1.1 | this means in conceptual terms: | METHOD /path HTTP/version |. The Server then reads this information and acts upon it. Through this it delivers us the content that we were asking for. Generally, GET requests are used for retrieving data from the Server, while POST requests alter data on the Server. GET requests include the query parameters and values into the URL - therefore they also have a limited length. POST requests on the other hand put them into the HTTP headers (after the headers). There's lots of space there and they are theoretically unlimited, even though most browsers do still set some limit.

-----------------------------------------------------------------------------------------------------------------------

HTML Templates and Abstraction: Your notes should show an understanding of why programmers use HTML templates, how these templates allow programmers to avoid repetition, and understanding of why avoiding repetition is important.

Haha! I think to give due respect to answering the aspect about avoiding repetition, I'll have to link to some parts in my previous projects - This has come up so many times that I'd be foolish to write about it again! But maybe it's a test ; ) HTML templates, however, are still quite some news, and what beautiful news!! I have been using jinja2 templates already for creating my Stage 3 submission, and I must say I like it quite a bit. Here's to some more: just look into my code. I hope I'm doing a good job, but if there are things to improve (and I'm sure there are plenty), then I'd be happy to receive some feedback on it. Just drop a line in my auto-escaped form inputs ; ) So why do I like to use this myself? I think there are two main reasons to it. First of all it makes me think about the basic structure of my website much more. I need to take a step back at the beginning of the project and consider how I'd like to build it. Just going forth building here a bit and there a bit on an individual page is kind of a sweet thing too, and often interesting specialities might come out of this. But it then becomes very much a unique weirdness of a page, something that is usually kind of difficult to understand for someone else (or even my future-self), something that is hard to reproduce, difficult to maintain, and utterly annoying to edit or change. Because these constructs work on a frail set of coincidental happenings, I picture them like a weird construct that DOES stand, however no one really really knows why, and removing some here might make the whole tower collapse. Therefore, these kind of pages are much more endangered of being attacked and compromised. Not a good thing for a something that might want to interact with many users, and keep them safe. And I have the feeling that through planning the basic structure at the beginning, and then keeping it in mind and essentially sticking to it because of the way the templates are crafted to work, some of these issues might be avoided. Secondly there is the aspect of easy editing. If I can keep all my content in one file, have a python script that auto-generates the page for me by using this data, then it is very easy to change and adapt the content of the page. I can keep it fresh and actual, without much struggle at all. This is awesome! I can skip on writing and re-writing certain parts of my HTML code, just be creating a main.html template that the other templates inherit from. Like this I can skip ever-rewriting e.g. the header and the footer (or the doctype declaration!). This saves time, saves typing effort, and reduces the chance of making mistakes! Ah..., seems you got me... Now I did after all end up writing again about the advantages of avoiding repetition... Haha. But these templates really got me into it! : )

-----------------------------------------------------------------------------------------------------------------------

The Importance of Validating Input: Your notes should acknowledge the importance of validating user input, especially the implications that validation has on site security and user experience.

When becoming a maker of content, there are certain important things that need to be considered, one of them being security. Security aspects have to be re-considered when adding new functionality to our website, since the behaviour and the potential threats arising from it will also change. One important concept when allowing users to input data, is therefore Validating User Input. Failing to do so properly can result in a range of bad stuff, from a rather harmless but surprising <marquee> that suddenly floats through the page after typing something into a field, up to malicious attacks that unwillingly buy things for an unwitting customer on some careless e-commerce website. There's a lot that can go wrong, so let's better take care. HTML escaping is an important concept, that prevents some kind of possible attacks, and avoids some uncomfortable, unintended (and unprofessional) side effects on our website. Here something comes into the game that I discovered in Stage 1: That if you want to talk about a <b> tag on your webpage, things might get funny. And also that there's a solution to this: &lt;b&gt; I didn't know by then that this was called "HTML escaping" and that it was part of a bigger and very important issue, that also concerns user security. What I did however understand was, that a pretty page can get ugly through this, and this holds also for unintended HTML that users might write into forms that turn the whole page appearance somewhat awkward. Personally I find the <marquee> kind of cool :) but I understand that there are many pages who wouldn't want anything floating around. But there is more to this topic: If one fails to validate user input properly, one opens up the door also to malicious attacks. I don't completely understand how these things work, but it can make it possible for a bad boy to load unintended scripts on a webpage, that could do all sorts of stuff. Tracking users, stealing data, doing action the user didn't want, or even go forth boldly and delete data on the server. Since all these are undesired actions from the viewpoint of, well...: me, I have to take care to protect myself and my potential website visitors. One important aspect about Validating input, that I found on W3's description of HTML 5.1 Nightly, is that user validation should always go across whitelist-based filters, meaning that it only allows certain kinds of inputs that are known to be save, instead of disallowing certain ones that are known to be unsafe. The second approach (based on blacklists), does not account for all possible malign actions, since some might simply not be known as of now.
jinja2, as most such compiling languages, features an automatic HTML escaping possibility, which needs to be defined like this: autoescape = True
Thereby it can save quite some worry and promote healthier sleeping. So I switch the switch to True :)

-----------------------------------------------------------------------------------------------------------------------

What I found especially interesting.

I found it very interesting to learn about POST requests, the status and request line, and HTTP headers. I also didn't know much about those pieces of information that are hanging out up there in the URL, and since I now can recognize ?query parameters and their =values, #fragments and :ports, my experience of reading pages on the web has found a new extra focus. | The concept of using HTML templates also fascinated me a lot, especially because passing HTML code as string constructs in python to auto-generate pages has so far left me feeling a bit uneasy. I did it, too, but it felt like a very messy path to walk. With learning about jinja2 and employing templates to generate pages, this all feels so much more clean and straightforward. So this templating got me quite excited. | I also liked the first part of this Stage, when we got an overview of the big picture of server-client interactions. We heard a bit about their issues and limitations and the attempts to solve them. I enjoyed the analogies and learned a bit more through some well-explained lectures.

-----------------------------------------------------------------------------------------------------------------------

Things that made me smile.

Steve Huffman did. More than once. : D Here's two examples in the following form "NumberOfVideo - Title StartTime" : "04 - More Handlers 02:13" / "22 - Grouping Radio Buttons (Answer) 00:04" (but there are many more!).
If you feel like it you can check these out or look for some others. Maybe he'll make you smile a bit too : ) But the strenght of the jokes probably comes from the fact that he knows his stuff very well and explains confidently and understandably. I was listening intently, learning a lot. And just then, once in a while (and in a way always a bit unexpected, because you're still quite engaged by his content) he drops a subtle joke. This made me smile a few times : )

-----------------------------------------------------------------------------------------------------------------------

Useful Links (for Stage 4):

http://www.w3.org/html/wg/drafts/html/master/single-page.html#writing-secure-applications-with-html

request line and status line:
https://www.garron.me/en/bits/mac-linux-terminal-http-headers-curl.html
http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html
http://code.tutsplus.com/tutorials/http-headers-for-dummies--net-8039

-----------------------------------------------------------------------------------------------------------------------
